package com.maksimnovikov.common.ui.saveStateRecycler

import android.content.Context
import android.os.Bundle
import android.os.Parcel
import android.os.Parcelable
import android.util.AttributeSet
import androidx.recyclerview.widget.RecyclerView

open class StateRecyclerView @JvmOverloads constructor(
    context: Context,
    attr: AttributeSet? = null,
    defStyleAttr: Int = 0
) : RecyclerView(
    context,
    attr,
    defStyleAttr
) {

    override fun onSaveInstanceState(): Parcelable {
        return NestedRecyclerSupportState(
            parentState = super.onSaveInstanceState()!!,
            adapterState = (adapter as? CustomDelegationAdapter<*>)?.saveInstanceState() ?: Bundle()
        )
    }

    override fun onRestoreInstanceState(state: Parcelable?) {
        (state as? NestedRecyclerSupportState)?.also { safeState ->
            super.onRestoreInstanceState(state.parentState)
            (adapter as? CustomDelegationAdapter<*>)?.restoreInstanceState(safeState.adapterState)
        }
    }
}

/**NestedRecyclerSupportState used to store states of nested recycler view and recreate scroll positions
 * when app activity is restored.
 *
 * It uses custom [Parcelable] implementation due to problem with bundle deserialization in @Parcelize generated code.
 * @param parentState state of the root recycler using NestedRecyclerSupportState
 * @param adapterState bundle with states of its nested recyclers*/
class NestedRecyclerSupportState(
    val parentState: Parcelable,
    val adapterState: Bundle
) : Parcelable {

    override fun describeContents(): Int {
        return 0
    }

    override fun writeToParcel(dest: Parcel?, flags: Int) {
        dest?.writeParcelable(this.parentState, flags)
        dest?.writeBundle(this.adapterState)
    }

    companion object {

        @JvmField
        val CREATOR: Parcelable.Creator<NestedRecyclerSupportState> =
            object : Parcelable.Creator<NestedRecyclerSupportState> {
                override fun createFromParcel(source: Parcel): NestedRecyclerSupportState {
                    val parentState: Parcelable =
                        source.readParcelable(NestedRecyclerSupportState::class.java.classLoader)!!

                    // This readBundle() call in code, generated by @Parcelize uses default class loader instead of custom, which causes
                    // problems with deserializing custom class instances.
                    val adapterState = source.readBundle(javaClass.classLoader)!!
                    return NestedRecyclerSupportState(parentState, adapterState)
                }

                override fun newArray(size: Int): Array<NestedRecyclerSupportState?> {
                    return arrayOfNulls(size)
                }
            }
    }
}